// sours/reviews.js
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞');
    
    const reviewForm = document.getElementById('reviewForm');
    const reviewsContainer = document.getElementById('reviewsContainer');
    
    if (!reviewForm) {
        console.log('–§–æ—Ä–º–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    // üîß –ù–ê–°–¢–†–û–ô–ö–ò FORMSPREE - –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® FORMSPREE ID
    const FORMSPREE_ENDPOINT = 'https://formspree.io/f/YOUR_FORMSPREE_ID_HERE';
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã
    loadReviews();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    reviewForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const name = document.getElementById('name').value.trim();
        const service = document.getElementById('service').value;
        const rating = document.querySelector('input[name="rating"]:checked');
        const reviewText = document.getElementById('review').value.trim();
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!name) {
            showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return;
        }
        
        if (!rating) {
            showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É');
            return;
        }
        
        if (!reviewText) {
            showErrorMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤');
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤
        const newReview = {
            id: Date.now(),
            name: name,
            service: service,
            rating: parseInt(rating.value),
            text: reviewText,
            date: new Date().toLocaleDateString('ru-RU'),
            timestamp: Date.now(),
            userToken: generateUserToken()
        };
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        saveReview(newReview);
        addReviewToPage(newReview);
        
        // üîß –û–¢–ü–†–ê–í–õ–Ø–ï–ú –û–¢–ó–´–í –ù–ê FORMSPREE
        sendReviewToFormspree(newReview);
        
        showSuccessMessage('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –æ—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏ —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ.');
        
        resetForm();
    });
    
    // üîß –§–£–ù–ö–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –í FORMSPREE
    function sendReviewToFormspree(review) {
        const formData = new FormData();
        formData.append('–ò–º—è', review.name);
        formData.append('–û—Ü–µ–Ω–∫–∞', `${review.rating}/5`);
        formData.append('–£—Å–ª—É–≥–∞', review.service || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
        formData.append('–û—Ç–∑—ã–≤', review.text);
        formData.append('–î–∞—Ç–∞', review.date);
        formData.append('–ò—Å—Ç–æ—á–Ω–∏–∫', '–°–∞–π—Ç Rhythm of Relaxation');
        
        fetch(FORMSPREE_ENDPOINT, {
            method: 'POST',
            body: formData,
            headers: {
                'Accept': 'application/json'
            }
        })
        .then(response => {
            if (response.ok) {
                console.log('‚úÖ –û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ Formspree');
                return response.json();
            } else {
                throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏');
            }
        })
        .then(data => {
            console.log('Formspree –æ—Ç–≤–µ—Ç:', data);
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Formspree:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            showOfflineMessage();
        });
    }
    
    function showOfflineMessage() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ–∑–∞–º–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏
        console.log('üìß –û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ. –ü—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.');
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    function generateUserToken() {
        let token = localStorage.getItem('userToken');
        if (!token) {
            token = 'user_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            localStorage.setItem('userToken', token);
        }
        return token;
    }
    
    function getCurrentUserToken() {
        return localStorage.getItem('userToken');
    }
    
    function resetForm() {
        reviewForm.reset();
        const submitBtn = reviewForm.querySelector('button[type="submit"]');
        if (submitBtn) {
            submitBtn.textContent = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤';
            submitBtn.classList.remove('btn-warning');
            submitBtn.classList.add('btn-primary');
        }
    }
    
    function deleteReview(reviewId) {
        const reviews = JSON.parse(localStorage.getItem('massageReviews') || '[]');
        const review = reviews.find(r => r.id === reviewId);
        const currentUserToken = getCurrentUserToken();
        
        if (review && review.userToken === currentUserToken) {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤?')) {
                let updatedReviews = reviews.filter(review => review.id !== reviewId);
                localStorage.setItem('massageReviews', JSON.stringify(updatedReviews));
                refreshReviewsDisplay();
                showSuccessMessage('–í–∞—à –æ—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω!');
            }
        } else {
            alert('–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –æ—Ç–∑—ã–≤—ã!');
        }
    }
    
    function refreshReviewsDisplay() {
        if (reviewsContainer) {
            reviewsContainer.innerHTML = '';
            loadReviews();
        }
    }
    
    function saveReview(review) {
        let reviews = JSON.parse(localStorage.getItem('massageReviews') || '[]');
        reviews.unshift(review);
        localStorage.setItem('massageReviews', JSON.stringify(reviews));
    }
    
    function loadReviews() {
        const reviews = JSON.parse(localStorage.getItem('massageReviews') || '[]');
        reviews.forEach(review => addReviewToPage(review));
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤`);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (reviews.length === 0 && reviewsContainer) {
            reviewsContainer.innerHTML = `
                <div class="col-12 text-center">
                    <div class="no-reviews-message">
                        <p class="text-muted">–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤. –ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º!</p>
                    </div>
                </div>
            `;
        }
    }
    
    function addReviewToPage(review) {
        if (!reviewsContainer) return;
        
        const currentUserToken = getCurrentUserToken();
        const canDelete = review.userToken === currentUserToken;
        
        const reviewHTML = `
            <div class="col-lg-6 mb-4" data-review-id="${review.id}">
                <div class="real-review-card">
                    <div class="real-review-header">
                        <div class="real-client-avatar">${review.name.charAt(0).toUpperCase()}</div>
                        <div class="client-info">
                            <div class="client-name">${review.name}</div>
                            <div class="review-date">${review.date}</div>
                        </div>
                        <div class="review-actions">
                            ${canDelete ? `
                                <button class="btn-delete" onclick="deleteReview(${review.id})" title="–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤">
                                    üóëÔ∏è
                                </button>
                            ` : ''}
                        </div>
                    </div>
                    <div class="real-rating">${'‚òÖ'.repeat(review.rating)}${'‚òÜ'.repeat(5 - review.rating)}</div>
                    <p class="real-review-text">${review.text}</p>
                    ${review.service ? `<span class="real-service-type">${review.service}</span>` : ''}
                    ${review.userToken === currentUserToken ? '<small class="text-muted d-block mt-2">–í–∞—à –æ—Ç–∑—ã–≤</small>' : ''}
                </div>
            </div>
        `;
        reviewsContainer.insertAdjacentHTML('beforeend', reviewHTML);
    }
    
    function showSuccessMessage(message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const existingAlerts = document.querySelectorAll('.alert-success');
        existingAlerts.forEach(alert => alert.remove());
        
        const alert = document.createElement('div');
        alert.className = 'alert alert-success alert-dismissible fade show';
        alert.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        const form = document.querySelector('.review-form-card');
        if (form) {
            form.insertBefore(alert, form.firstChild);
        }
    }
    
    function showErrorMessage(message) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const existingAlerts = document.querySelectorAll('.alert-danger');
        existingAlerts.forEach(alert => alert.remove());
        
        const alert = document.createElement('div');
        alert.className = 'alert alert-danger alert-dismissible fade show';
        alert.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        const form = document.querySelector('.review-form-card');
        if (form) {
            form.insertBefore(alert, form.firstChild);
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏
    window.deleteReview = deleteReview;
    
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å Formspree –≥–æ—Ç–æ–≤–∞!');
    console.log('üìß –û—Ç–∑—ã–≤—ã –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É —á–µ—Ä–µ–∑ Formspree');
});
